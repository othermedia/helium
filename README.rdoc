= TomDeployer

TomDeployer is a Ruby library for running a Git-backed JavaScript package distribution
system and CDN server. It comes with a web frontend that allows Git-hosted projects
to be downloaded, built and served from a single domain, allowing any number of other
sites to use the projects and receive automatic updates when new versions are deployed.


== Requirements

Before deploying this app, you will need Ruby, Passenger (mod_rack), and Git installed
on your webserver. You will also need the following gems:

  sudo gem install grit jake packr sinatra rack

A brief explanation: +grit+ provides a Ruby API for querying +git+ repositories, +jake+
is an automated build tool for JavaScript, +packr+ is a JavaScript code compressor,
+sinatra+ is a small Ruby web framework and +rack+ provides glue between Ruby apps and
webservers (Passenger uses this to serve Ruby apps through Apache).


== Installation

Check this project out onto your server (your SSH key must be registered with the
othermedia account):

  git clone git@github.com:othermedia/tom_deployer.git

This should give you the following directory layout (some files omitted):

  /tom_deployer
      /lib
          packages.js.erb
          tom_deployer.rb
          trie.rb
      /web
          /public
              /style.css
          /views
              config.erb
              index.erb
              layout.erb
          app.rb
          config.ru

=== Apache setup

To serve this application, just set up an Apache VHost whose +DocumentRoot+ is the
<tt>web/public</tt> directory. Passenger should do the rest.

In addition, the Apache user will need read/write access to <tt>web/deploy.yml</tt>
and <tt>web/loader.js</tt>, which are editable through the web frontend. The application
will generate a directory at <tt>web/lib</tt>, which will be used to check out and
build projects from Git -- Apache will need read/write access to this directory.

=== Serving JavaScript files

The build process exports JavaScript files for public consumption to <tt>web/lib/static</tt>,
but by default this directory is not publicly visible. We recommend that you serve
the deployment app from an internal domain (e.g. <tt>jsdeploy.otherworks.com</tt>), and only
provide public access to the JavaScript files on another domain (e.g. <tt>js.othermedia.com</tt>).
An Apache setup for this might look like:

  <VirtualHost jsdeploy.otherworks.com:80>
    DirectoryIndex index.html
    DocumentRoot /path/to/tom_deployer/web/public/
  </VirtualHost>
  
  <VirtualHost js.othermedia.com:80>
    DirectoryIndex index.html
    DocumentRoot /path/to/some_public_dir/
    
    # Requires mod_deflate
    AddOutputFilterByType DEFLATE text/html text/plain text/javascript application/x-javascript
  </VirtualHost>

Then set up a symlink from the live domain to the <tt>web/lib/static</tt> directory:

  ln -s /path/to/tom_deployer/web/lib/static /path/to/some_public_dir/js

The JavaScript files will then be available under <tt>http://js.othermedia.com/js/</tt>.
Alternatively, use +rsync+ to copy everything in <tt>web/lib/static</tt> to another
domain. If you want to serve the scripts from the deployment app itself, do this:

  cd /path/to/tom_deployer/web/public
  ln -s ../lib/static js

