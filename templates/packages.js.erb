(function() {
    var protocol = ("https:" == document.location.protocol) ? "https:" : "http:";
    window.JSCLASS_PATH = window.JSCLASS_PATH ||
                          protocol + "//<%= @location %><%= File.dirname(@js_loader.sub(static_dir, '')) %>";
})();

<%= File.read(@js_loader) %>

this.require = this.require || JS.require;


/**
 * JavaScript package manifest, generated <%= Time.now %>
 * Requires JS.Class package manager: http://jsclass.jcoglan.com/packages.html
 * 
 * Usage: place the following in the HEAD of your HTML pages,
 * then use the `require()` function to load objects on demand.
 * 
 *     <!-- Step 1. Load JS.Class and the package listing -->
 *     <script type="text/javascript" src="http://<%= @location %>/<%= PACKAGES_MIN %>"></script>
 *     
 *     <!-- Step 2. Declare which branches to use -->
 *     <script type="text/javascript">
 *     Helium.use('yui', '2.7.0');
 *     Helium.use('ojay', '0.4.1');
 *     </script>
 **/
JS.Packages(function() { with(this) {

<% if @custom -%>
/*--- User-defined loader functions ------------------------------*/

<%= @custom -%>

/*----------------------------------------------------------------*/
<% end -%>

    var BRANCHES = {}, manifest, pathname;

<% @tree.each_child do |project, branches| -%>

    BRANCHES['<%= project %>'] = {};
<% branches.each_child do |branch, files| -%>
<% next unless has_manifest?(files) -%>

    manifest = (BRANCHES['<%= project %>']['<%= branch %>'] = { c: '<%= files.value %>', f: {} }).f;
<% files.each do |path, config| -%>
<% next unless has_manifest?(config) -%>

    /**
     * Manifest for project '<%= project %>', branch '<%= branch %>'
     * File: '<%= path.first %>'
     **/
    pathname = manifest['<%= path.first %>'] = {};
    pathname.p = <%= (config[:provides] || []).inspect %>;
    pathname.r = <%= (config[:requires] || []).inspect %>;
    pathname.u = <%= (config[:uses] || []).inspect %>;
<% end -%>
<% end -%>
<% end -%>

    /**
     * log(message) -> undefined
     * - message (String)
     * 
     * Prints configuration notices to the console for debugging
     **/
    var log = function(string) {
        if (!window.console) return;
        console.info ? console.info(string)
                     : console.log(string);
    };
    
    window.Helium = window.Helium || {};
    
    var protocol = ("https:" == document.location.protocol) ? "https:" : "http:";
    Helium.PATH = protocol + "//<%= @location %>";
    
    /**
     * Helium.use(project, branch) -> undefined
     * - project (String)
     * - branch (String)
     * 
     * Selects a branch to use from a project, and adds the manifest for the given
     * branch to the JS.Class package registry. This does not load any extra
     * JavaScript files, it simply tells JS.Class which files to use when that
     * project's objects are required.
     * 
     * The Helium.PATH variable *must* be set before calling this function so
     * we can set the full path to the files in the given branch.
     **/
    Helium.use = function(project, branch) {
        if (!this.PATH) throw "Please set Helium.PATH before specifying branches";
        
        var projectBranches = BRANCHES[project];
        if (!projectBranches) throw "Could not find project '" + project + "'";
        
        if (typeof projectBranches === "string")
            throw "Project '" + project + "' is already using branch '" + projectBranches + "'";
        
        var pkg = projectBranches[branch];
        if (!pkg) throw "Could not find branch '" + branch + "' of project '" + project + "'";
        
        log("Using '" + project + "', version: '" + branch + "'");
        BRANCHES[project] = branch;
        
        var commit = pkg.c,
            files  = pkg.f,
            path, config, builder;
        
        for (path in files) {
            if (!files.hasOwnProperty(path)) continue;
            
            config  = files[path];
            builder = file([this.PATH, project, commit].join('/') + path);
            builder.provides.apply(builder, config.p);
            builder.requires.apply(builder, config.r);
            builder.uses.apply(builder, config.u);
        }
    };

/*--- end JS.Packages block ---*/
}});

