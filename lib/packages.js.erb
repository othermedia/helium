JS.Packages(function() { with(this) {

<% if @custom %>
/*--- User-defined loader code ---*/
<%= @custom %>
/*--------------------------------*/
<% end %>

var BRANCHES = {}, current, pathname;

<% @tree.each_child do |project, branches| -%>
BRANCHES['<%= project %>'] = {};
<% branches.each_child do |branch, files| -%>
current = BRANCHES['<%= project %>']['<%= branch %>'] = {};
<% files.each do |path, config| -%>
<% next unless config[:provides] -%>
pathname = current['<%= path * '/' %>'] = {};
pathname.p = <%= (config[:provides] || []).inspect %>;
pathname.r = <%= (config[:requires] || []).inspect %>;

<% end -%>
<% end -%>
<% end -%>

var log = function(string) {
    if (!window.console) return;
    console.info ? console.info(string)
                 : console.log(string);
};

window.JS_CONFIG = window.JS_CONFIG || {};

JS_CONFIG.use = function(project, branch) {
    if (!this.PATH) throw "Please set JS_CONFIG.PATH before specifying branches";
    
    var projectBranches = BRANCHES[project];
    if (!projectBranches) throw "Could not find project '" + project + "'";
    
    var pkg = projectBranches[branch];
    if (!pkg) throw "Could not find branch '" + branch + "' of project '" + project + "'";
    
    log("Using '" + project + "', version: '" + branch + "'");
    
    var path, config, builder;
    
    for (path in pkg) {
        if (!pkg.hasOwnProperty(path)) continue;
        
        config  = pkg[path];
        builder = file([this.PATH, project, branch].join('/') + path);
        builder.provides.apply(builder, config.p);
        builder.requires.apply(builder, config.r);
    }
};

/*--- end JS.Packages block ---*/
}});

